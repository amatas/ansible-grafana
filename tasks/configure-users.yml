---

# Also tried to change using grafana-cli but the version installed has a bug:
# https://community.grafana.com/t/grafana-sqlite3-database-admin-passwd-change/234/9
#
- name: Change admin password from default
  uri:
    method: PUT
    user: "{{ grafana_admin_user|quote }}"
    password: "{{ grafana_admin_default_password|quote }}"
    force_basic_auth: true
    body_format: json
    body: {
      "oldPassword": "{{ grafana_admin_default_password|quote }}",
      "newPassword": "{{ grafana_admin_password|quote }}"
    }
    url: "http://localhost:{{ grafana_port }}/api/user/password"
  args:
    # Actually created by the next step. I couldn't figure a better way to
    # calculate whether this needs to run, and of course it will fail if the
    # default password has already been changed.
    creates: "{{ grafana_admin_password_is_changed_file }}"

# Touching a file iff it does not exist is shockingly hard in Ansible. I took
# this workaround from
# http://stackoverflow.com/questions/28347717/how-to-create-an-empty-file-with-ansible
- name: Touch file to indicate admin password is changed
  copy:
    content: ""
    dest: "{{ grafana_admin_password_is_changed_file }}"
    force: no

- name: Get all users configured
  uri:
    method: GET
    user: "{{ grafana_admin_user|quote }}"
    password: "{{ grafana_admin_password|quote }}"
    force_basic_auth: true
    body_format: json
    url: "http://localhost:{{ grafana_port }}/api/users"
  register: current_users_raw

- name: Set fact based on the users installed from the raw response
  set_fact:
    current_users: "{{ current_users_raw.json }}"

- name: Set default list facts
  set_fact:
    users_to_create: []
    users_to_update: []
    current_users_names: []

- name: Set fact based on the users installed from the json list
  set_fact:
    current_users_names: "{{ current_users_names | union( [item.name] ) }}"
  with_items: "{{ current_users }}"

- name: Set fact based on users to create
  set_fact:
    users_to_create: "{{ users_to_create | union( [item.name] ) }}"
  when: not (item.name in current_users_names)
  with_items: "{{ grafana_users }}"

- name: Set fact based on datasorces to update
  set_fact:
    users_to_update: "{{ users_to_update | union( [item.name] ) }}"
  when: item.name in current_users_names
  with_items: "{{ grafana_users }}"

- name: Set fact based on users to delete
  set_fact:
    users_to_delete: "{{ current_users_names | difference(users_to_create | union(users_to_update)) }}"

- name: Create users
  uri:
    method: POST
    user: "{{ grafana_admin_user|quote }}"
    password: "{{ grafana_admin_password|quote }}"
    force_basic_auth: true
    body_format: json
    body: "{{ item | to_json }}"
    url: "http://localhost:{{ grafana_port }}/api/admin/users"
  when: item.name in users_to_create
  with_items: "{{ grafana_users }}"

- name: Update users
  uri:
    method: PUT
    user: "{{ grafana_admin_user|quote }}"
    password: "{{ grafana_admin_password|quote }}"
    force_basic_auth: true
    body_format: json
    body: "{{ item | to_json }}"
    url: "http://localhost:{{ grafana_port }}/api/users/{{item.id}}"
  when: item.name in users_to_update
  with_items: "{{ current_users }}"

- name: Delete users
  uri:
    method: DELETE
    user: "{{ grafana_admin_user|quote }}"
    password: "{{ grafana_admin_password|quote }}"
    force_basic_auth: true
    url: "http://localhost:{{ grafana_port }}/api/admin/users/{{item.id}}"
  when: (item.name in users_to_delete) and (item.id != 1)
  with_items: "{{ current_users }}"
